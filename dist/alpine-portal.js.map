{"version":3,"file":"alpine-portal.js","sources":["../src/Portal.js","../src/index.js","../src/build.js"],"sourcesContent":["/**\r\n * Portal that controls the teleportation process.\r\n *\r\n * @since 0.1.0\r\n *\r\n * @param {HTMLElement} el\r\n * @constructor\r\n */\r\nfunction Portal(el) {\r\n\r\n    /**\r\n     * Target selector.\r\n     *\r\n     * @since 0.1.0\r\n     * @type {string}\r\n     */\r\n    this.target = '';\r\n\r\n    /**\r\n     * Screen breakpoint.\r\n     *\r\n     * @since 0.1.0\r\n     * @type {int}\r\n     */\r\n    this.screen = 0;\r\n\r\n    /**\r\n     * Whether to teleport if it is greater than the specified screen breakpoint or if it is smaller.\r\n     * The default is true, which means teleporting if it is greater.\r\n     *\r\n     * @since 0.1.0\r\n     * @type {boolean}\r\n     */\r\n    this.is = true;\r\n\r\n    /**\r\n     * The element belonging to the first parent so that it can be reverted to it after teleportation.\r\n     *\r\n     * @since 0.1.0\r\n     * @type {HTMLElement}\r\n     */\r\n    const elRealParent = el.parentElement;\r\n\r\n    /**\r\n     * Whether it has been teleported to the target or not.\r\n     * In other words, whether the element is inside the target or not.\r\n     *\r\n     * @since 0.1.0\r\n     * @type {boolean}\r\n     */\r\n    let teleported = false;\r\n\r\n    /**\r\n     * Window resize event.\r\n     *\r\n     * @since 0.1.0\r\n     */\r\n    this.onResize = () => {\r\n        const isScreen = window.innerWidth > this.screen;\r\n\r\n        // If it has been previously teleported to the target, then the element's return must be checked.\r\n        if (teleported) {\r\n            if ((this.is && !isScreen) || (!this.is && isScreen)) {\r\n                elRealParent.appendChild(el);\r\n                teleported = false;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // If it has not been previously teleported to the target, then the teleportation to the target must be checked.\r\n        if ((this.is && isScreen) || (!this.is && !isScreen)) {\r\n            document.querySelector(this.target).appendChild(el);\r\n            teleported = true;\r\n        }\r\n    }\r\n\r\n    // Define the screen resize event.\r\n    window.addEventListener(\"resize\", this.onResize);\r\n\r\n    // For the next tick, set up the screen resize event to be executed and checked at the beginning of document load.\r\n    window.Alpine.nextTick(this.onResize);\r\n}\r\n\r\nexport default Portal;","import Portal from \"./Portal\";\r\n\r\n/**\r\n * List of portals... Currently not in use.\r\n *\r\n * @since 0.1.0\r\n * @type {Portal[]}\r\n */\r\nconst portals = [];\r\n\r\nexport default function (Alpine) {\r\n    Alpine.directive('portal', (el, {value, expression}, {evaluate}) => {\r\n        // Defining a portal object on the element itself.\r\n        if (!value && el._x_portal === undefined) {\r\n            el._x_portal = new Portal(el);\r\n            portals.push(el._x_portal);\r\n        }\r\n\r\n        // If there is no value for the expression, ignore it.\r\n        if (expression === false) return;\r\n\r\n        // If the directive value is not present, it is in the process of setting the target property of the portal.\r\n        if (!value) {\r\n            value = 'target';\r\n        }//\r\n        // If the value is provided for the directive, that value is the name of a portal property, and the expression must also be evaluated.\r\n        else {\r\n            expression = evaluate(expression);\r\n        }\r\n\r\n        // Set the property for the portal.\r\n        el._x_portal[value] = expression;\r\n    });\r\n};","import AlpinePortal from \"./index\";\r\n\r\n/**\r\n * For when using a CDN.\r\n *\r\n * @since 0.1.0\r\n */\r\ndocument.addEventListener('alpine:init', () => {\r\n    AlpinePortal(window.Alpine);\r\n});"],"names":["Portal","el","this","target","screen","is","elRealParent","parentElement","teleported","onResize","isScreen","window","innerWidth","appendChild","document","querySelector","addEventListener","Alpine","nextTick","portals","directive","value","expression","evaluate","undefined","_x_portal","push"],"mappings":"2FAQA,SAASA,EAAOC,GAQZC,KAAKC,OAAS,GAQdD,KAAKE,OAAS,EASdF,KAAKG,IAAK,EAQV,MAAMC,EAAeL,EAAGM,cASxB,IAAIC,GAAa,EAOjBN,KAAKO,SAAW,KACZ,MAAMC,EAAWC,OAAOC,WAAaV,KAAKE,OAGtCI,GACKN,KAAKG,KAAOK,IAAeR,KAAKG,IAAMK,KACvCJ,EAAaO,YAAYZ,GACzBO,GAAa,IAMhBN,KAAKG,IAAMK,IAAeR,KAAKG,KAAOK,KACvCI,SAASC,cAAcb,KAAKC,QAAQU,YAAYZ,GAChDO,GAAa,EACjB,EAIJG,OAAOK,iBAAiB,SAAUd,KAAKO,UAGvCE,OAAOM,OAAOC,SAAShB,KAAKO,SAChC,CCzEA,MAAMU,EAAU,GCDhBL,SAASE,iBAAiB,eAAe,KACxBL,OAAOM,ODGbG,UAAU,UAAU,CAACnB,GAAKoB,QAAOC,eAAcC,eAE7CF,QAA0BG,IAAjBvB,EAAGwB,YACbxB,EAAGwB,UAAY,IAAIzB,EAAOC,GAC1BkB,EAAQO,KAAKzB,EAAGwB,aAID,IAAfH,IAGCD,EAKDC,EAAaC,EAASD,GAJtBD,EAAQ,SAQZpB,EAAGwB,UAAUJ,GAASC,EAAU,GCvBT"}